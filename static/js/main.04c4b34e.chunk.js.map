{"version":3,"sources":["components/App.js","components/Layout.js","index.js"],"names":["App","state","amount","amountConverted","amountInWordsIteger","amountInWordsAfterPoint","hundreds","dozens","unities","billionSuffixes","millionSuffixes","thousandSuffixes","zlSuffixes","grSuffixes","handleChangeAmount","e","_this","setState","target","value","handleConvertAmount","preventDefault","setAmountInWords","billions","getAmountPart","millions","thousands","integerAmount","Math","floor","afterPoint","round","getPartAmountInWords","setSuffix","concat","converter","amountPart","amountNumber","suffixArray","partAmountInWords","findAmountWord","wordsArray","amountWord","forEach","item","parseInt","amountInNumber","amountInWords","handleCopyClick","copyText","document","querySelector","textArea","createElement","textContent","body","appendChild","select","setSelectionRange","execCommand","remove","fetchAmountPartWords","fetch","then","response","json","data","this","react_default","a","Fragment","onSubmit","type","min","max","step","onChange","className","onClick","Component","Layout","components_App","ReactDOM","render","components_Layout","getElementById"],"mappings":"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","file":"static/js/main.04c4b34e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  state = {\n    amount: \"\", // amount value from the form\n    amountConverted: false, // is the amount after conversion to words format?\n    amountInWordsIteger: \"\", // final words value of integer amount (amount before point)\n    amountInWordsAfterPoint: \"\" // final words value of amount after point\n  }\n\n  // empty arrays for word names of hundreds, dozens and unities (these names are downloaded from another file)\n  hundreds = [];\n  dozens = [];\n  unities = [];\n\n  // arrays with suffix variants\n  billionSuffixes = [\"miliard\", \"miliardy\", \"miliardów\"];\n  millionSuffixes = [\"milion\", \"miliony\", \"milionów\"];\n  thousandSuffixes = [\"tysiąc\", \"tysiące\", \"tysięcy\"];\n  zlSuffixes = [\"złoty\", \"złote\", \"złotych\"];\n  grSuffixes = [\"grosz\", \"grosze\", \"groszy\"];\n\n  // method, which changes the state with data from the form and resets result of the conversion (because after changing data, App shouldn't show the result)\n  handleChangeAmount = (e) => {\n    this.setState({\n      amount: e.target.value,\n      amountConverted: false,\n      amountInWordsIteger: \"\",\n      amountInWordsAfterPoint: \"\"\n    });\n  }\n\n  // method, which calls the conversion method, after submitting the form with amount value\n  handleConvertAmount = (e) => {\n    e.preventDefault();\n    this.setAmountInWords();\n  }\n\n  // main method, which converts amount from number format to words format - it also calls other methods\n  setAmountInWords = () => {\n    let amount = this.state.amount;\n\n    // division the amount into three-digit numbers (billions, millions, thousands and the rest)\n    const billions = this.getAmountPart(amount, 1000000000);\n    amount %= 1000000000;\n\n    const millions = this.getAmountPart(amount, 1000000);\n    amount %= 1000000;\n\n    const thousands = this.getAmountPart(amount, 1000);\n    amount %= 1000;\n\n    const integerAmount = Math.floor(amount);\n    const afterPoint = Math.round((amount - integerAmount) * 100);\n\n\n    // amount conversion from the number format to words format\n    let amountInWordsIteger = \"\";\n    let amountInWordsAfterPoint = \"\";\n\n    if (this.state.amount < 1) {\n      amountInWordsIteger = \"zero \";\n    } else {\n      amountInWordsIteger += this.getPartAmountInWords(billions, this.billionSuffixes);\n      amountInWordsIteger += this.getPartAmountInWords(millions, this.millionSuffixes);\n      amountInWordsIteger += this.getPartAmountInWords(thousands, this.thousandSuffixes);\n      amountInWordsIteger += this.getPartAmountInWords(integerAmount, \"\");\n    }\n    amountInWordsIteger += this.setSuffix(this.zlSuffixes, Math.floor(this.state.amount));\n\n    if (afterPoint > 0) {\n      amountInWordsAfterPoint = ` i ${this.getPartAmountInWords(afterPoint, \"\")}`;\n      amountInWordsAfterPoint += this.setSuffix(this.grSuffixes, afterPoint);\n    }\n\n    this.setState({\n      amountConverted: true,\n      amountInWordsIteger,\n      amountInWordsAfterPoint\n    });\n  }\n\n  // method, which returns three-digit number from longer number (ex. numbers of billions, millions etc.)\n  getAmountPart = (amount, converter) => {\n    let amountPart = 0;\n\n    if (amount >= converter) {\n      amountPart = Math.floor(amount / converter);\n    }\n\n    return amountPart;\n  }\n\n  // method, which returns amount in words for a three-digit number\n  getPartAmountInWords = (amountNumber, suffixArray) => {\n    let partAmountInWords = \"\";\n\n    if (amountNumber > 0) {\n      let hundreds = 0;\n      let dozens = 0;\n      let unities = 0;\n\n      hundreds = Math.floor(amountNumber / 100);\n      if ((amountNumber % 100) >= 20) {\n        dozens = Math.floor((amountNumber % 100) / 10);\n        unities = (amountNumber % 100) % 10;\n      } else {\n        unities = amountNumber % 100;\n      }\n\n      partAmountInWords += this.findAmountWord(this.hundreds, hundreds);\n      partAmountInWords += this.findAmountWord(this.dozens, dozens);\n      partAmountInWords += this.findAmountWord(this.unities, unities);\n\n      if (suffixArray !== \"\") {\n        if (amountNumber === 1) {\n          partAmountInWords = this.setSuffix(suffixArray, amountNumber) + \" \";\n        } else {\n          partAmountInWords += this.setSuffix(suffixArray, amountNumber) + \" \";\n        }\n      }\n    }\n\n    return partAmountInWords;\n  }\n\n  // method, which returns amount in word for a single number of hundreds, dozens or unities in the three-digit number\n  findAmountWord = (wordsArray, amountNumber) => {\n    let amountWord = \"\";\n    if (amountNumber > 0) {\n      wordsArray.forEach(item => {\n        if (parseInt(item.amountInNumber) === amountNumber) {\n          amountWord = item.amountInWords + \" \";\n        }\n      });\n    }\n    return amountWord;\n  }\n\n  // method, which returns suffix of the number in correct variant\n  setSuffix = (suffixArray, amountNumber) => {\n    if (amountNumber === 1) {\n      return suffixArray[0];\n    } else if (((amountNumber % 100) < 10) || ((amountNumber % 100) > 20)) {\n      if ((amountNumber % 10 === 2) || (amountNumber % 10 === 3) || (amountNumber % 10 === 4)) {\n        return suffixArray[1];\n      } else {\n        return suffixArray[2];\n      }\n    } else {\n      return suffixArray[2];\n    }\n  }\n\n  // method, which is called after click the \"Copy\" button - it copies the amount in words to clipboard\n  handleCopyClick = () => {\n    const copyText = document.querySelector(\"p.result\");\n\n    const textArea = document.createElement(\"textarea\");\n    textArea.value = copyText.textContent;\n    document.body.appendChild(textArea);\n\n    textArea.select();\n    textArea.setSelectionRange(0, 99999);\n    document.execCommand(\"copy\");\n\n    textArea.remove();\n  }\n\n  // method, which gets amount names from another file and saves it in arrays, located in this component\n  fetchAmountPartWords = () => {\n    fetch('data/amountPartWords.json')\n      .then(response => response.json())\n      .then(data => {\n        this.hundreds = data.hundreds;\n        this.dozens = data.dozens;\n        this.unities = data.unities;\n      });\n  }\n\n  // method, which is called after first rendering the component - it calls fetch method, which gets amount names from another file\n  componentDidMount() {\n    this.fetchAmountPartWords();\n  }\n\n  // rendering the component with two parts - form to enter the amount and the program result\n  render() {\n    return (\n      <>\n        <form onSubmit={this.handleConvertAmount}>\n          <span>Wprowadź kwotę:</span>\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"999999999999.99\"\n            step=\"0.01\"\n            value={this.state.amount}\n            onChange={this.handleChangeAmount}\n          />\n          <button><i className=\"fas fa-sync-alt\"></i> Konwertuj</button>\n        </form>\n        {this.state.amountConverted ? (\n          <div className=\"result\">\n            <h2>Kwota słownie:</h2>\n            <p className=\"result\">{this.state.amountInWordsIteger}{this.state.amountInWordsAfterPoint}</p>\n            <button onClick={this.handleCopyClick}><i className=\"fas fa-copy\"></i> Kopiuj</button>\n          </div>\n        ) : null}\n      </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport App from './App';\nimport '../styles/App.css';\n\nconst Layout = () => {\n    return (\n        <div className=\"app\">\n            <header>\n                <h1>Kwota słownie</h1>\n            </header>\n            <main>\n                <section className=\"converter\">\n                    <App />\n                </section>\n            </main>\n            <footer>\n                <p>&copy; 2019, created by <span>Radosław Kołodziejczyk</span></p>\n            </footer>\n        </div>\n    );\n}\n\nexport default Layout;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport Layout from './components/Layout';\n\nReactDOM.render(<Layout />, document.getElementById('root'));\n"],"sourceRoot":""}